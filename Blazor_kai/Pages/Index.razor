@page "/"
@using System.Security.Claims
@using Blazor_kai.Data;
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Index</PageTitle>
<style>
body{
    background-color: white;
}


a.button {
  display: inline-block;
  color: black;
  text-decoration: none;
  padding: .5em 2em;
  outline: none;
  border-width: 2px 0;
  border-style: solid none;
  border-color: #e5e5e5;
  border-radius: 6px;
  background-color: white;
  transition: 0.2s;
} 

.center{
    left: 47%;
    margin-right: -50%;
    transform: translate(-10%);
    position: fixed;
    flex-direction: column;
}
h3.login{
    font-family: 'Poppins',sans-serif;
    color: white;
    letter-spacing: 0.5px;
    font-size: 24px;
    font-weight: 500;
    line-height: 42px;
}
label{
    display: block;
    margin-top: 30px;
    font-size: 16px;
    font-weight: 500;
    font-family: 'Poppins',sans-serif;
    color: #ffffff;
    letter-spacing: 0.5px;
    outline: none;
    border: none;
}
form{
    height: 680px;
    width: 600px;
    background-color: rgba(255,255,255,0.13);
    border-radius: 10px;
    backdrop-filter: blur(10px);
    border: 2px solid rgba(255,255,255,0.1);
    box-shadow: 0 0 40px rgba(8,7,16,0.6);
    padding: 50px 35px;
}
.box{
    display:flex;
    justify-content:space-between;
    flex-direction: row;
    margin-bottom: 20px;
}

.grid-item {
      padding: 10px;
      font-size: 15px;
      text-align: center;
}
.btn{
        display:inline-block;
        padding:15px;
        margin:20px;
        border:2px solid black;
        border-radius:10px;
        cursor: pointer;
        -webkit-transition: background  200ms;
        -moz-transition: background  200ms;
        -ms-transition: background  200ms;
        -o-transition: background  200ms;
        transition: background  200ms;
        }
        .btn:hover{
            background: #8a8888;
        }
        .btn:active{
            background: #787575;
        }


@@media (max-width:640px){
    .box{
        flex-direction:column;
    }
}
</style>
@if (!@isAutoriz) {
<div class="container center">
<h3 class="login" style="color:black">
    Вы не вошли в аккаунт!
</h3>
<a class="button" href="/Identity/Account/Login" >Вход</a>
<a class="button" href="Identity/Account/Register" >Регистрация</a>

</div>
}
@if(@isAutoriz)
        {
        <List></List>
        }
        
@code {
    private string _authMessage;
    public bool isAutoriz = false;

    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;

        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAutoriz = user.Identity.IsAuthenticated;
    }
}